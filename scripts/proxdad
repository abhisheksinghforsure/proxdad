#!/bin/bash
#
# proxdad script | MIT License
#
# This script introduce ProxDad version "v1.0" to a user. 
#
#
# It streamlines proxy configuration on Linux. It provides commands for modifying, 
# activating, deactivating, checking status, and locating its installation 
# directory. Users can access usage and version information easily, with options 
# for reporting bugs via GitHub, ensuring efficient system management.
#
#
# Copyright (C) 2024 Abhishek Singh
#

# Check if the script is run by root
if [ "$(id -u)" = "0" ]; then
    echo "DON'T run as root."
    exit 1
fi

proxdad_version="v1.0"
proxdad_installation_path="$HOME/.proxdad"

# Define usage function
usage() {
    echo "ProxDad $proxdad_version is a collection of bash scripts that help manage proxy settings "
    echo -e "in Linux. It configures proxy settings for: \n"
    echo "- Environment variables for system-wide use."
    echo "- APT (Advanced Package Tool) for package management."
    echo "- GNOME proxy applet settings."
    echo "- Git for version control."
    echo "- npm (Node Package Manager) for Node.js packages."
    echo "- Snap for managing snap packages."
    echo "- SSH for secure shell connections."
    echo -e "\nInstalled at $proxdad_installation_path\n"
    echo -e "Copyright (C) 2024 Abhishek Singh\n"
    echo "Usage: $(basename $0) [-h | --help] [-v | --version] [command]"
    echo "Options:"
    echo "  -h, --help      Display this help"
    echo "  -v, --version   Display version information"
    echo "Commands:"
    echo "  modify          Modify Proxdad settings"
    echo "  off             Turn off Proxdad"
    echo "  on              Turn on Proxdad"
    echo "  status          Get the status of Proxdad"
    echo "  where           Show the location of Proxdad"
    echo -e "\nFor bug reports, please visit: \nhttps://github.com/abhisheksinghforsure/proxdad/issues"
    echo -e "\nThis is free software; see the license for copying conditions. There is NO"
    echo "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
    exit 1
}

# Define version function
version() {
    echo "$(basename $0) $proxdad_version"
    exit 0
}

# Parse command-line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -v|--version)
            version
            ;;
        *)  # If no options match, consider it as a command
            COMMAND="$1"
            ;;
    esac
    shift
done

# Check if command argument is provided
if [ -z "$COMMAND" ]; then
    echo -e "Error: No command specified.\n"
    usage
fi

# Convert shortened command names to full command names
case $COMMAND in
    modify) COMMAND="modifyproxdad" ;;
    off) COMMAND="offproxdad" ;;
    on) COMMAND="onproxdad" ;;
    status) COMMAND="statusproxdad" ;;
    where) COMMAND="whereproxdad" ;;
    *)
        echo -e "Error: Invalid command specified.\n"
        usage
        ;;
esac

# Execute the specified command
"$COMMAND"
